apply plugin: 'java'

import groovy.io.FileType
import groovy.json.JsonSlurper

sourceSets {
    generated {
        java
        compileClasspath += sourceSets.main.runtimeClasspath
        runtimeClasspath += sourceSets.test.runtimeClasspath
    }
    main.java.srcDirs += generated.java.srcDirs
}

def jshortyPathx = ""

task ensureJShorty {

    jshortyPathx = ""

    doFirst {

        def root = project.projectDir.absolutePath + '\\jshorty'
        def files = file(root).list()

        for (file in files) {
            if (file.matches("JShorty.*.jar\$")) {
                jshortyPathx = file
                println "JShorty executable found at $jshortyPathx"
                return
            }
        }
        println "JShorty executable not found!"

        if (ext.jshortyPath.equals("")) {
            jshortyPathx = downloadLatestJShorty(root)
            println "JShorty executable downloaded at $jshortyPathx"
        }

    }
}

task compileJShorty(type: JavaExec) {
    doFirst {

        def proj_root = project.projectDir
        def gen_root = sourceSets.generated.java.srcDirs.getAt(0)

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        def configurations_args = []

        configurations_args << "jst_args_project_root=" + proj_root.absolutePath
        configurations_args << "jst_args_sources_root=" + gen_root

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        project.sourceSets.main.java.srcDirs.each { root ->
            root.eachFileRecurse(FileType.FILES) { file ->
                if (!file.absolutePath.startsWith(gen_root.absolutePath))
                    configurations_args << file.absolutePath
            }
        }

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        def jshortyPath = null

        def jst_root = project.projectDir.absolutePath + File.separator + 'jshorty'

        for (file in new File(jst_root).listFiles()) {
            if (file.name.matches("JShorty.*.jar\$")) {
                jshortyPath = file
                println "JShorty executable found at $jshortyPath"
                break
            }
        }

        if (jshortyPath == null) {
            println "JShorty executable not found!"

            jshortyPath = new File(jst_root + File.separator + downloadLatestJShorty(jst_root))
            println "JShorty executable downloaded at $jshortyPath"
        }

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        classpath jshortyPath.absolutePath
        args configurations_args

    }

}

compileJava.dependsOn compileJShorty

static String downloadLatestJShorty(String path) {
    def releaseData = downloadToString("https://api.github.com/repos/Minecraftian14/JShortyOutlet/releases/latest");
    def parsedJson = new JsonSlurper().parseText(releaseData)

    for (data in parsedJson.assets) {

        def assetName = data.name
        if (assetName.startsWith("JShorty") && assetName.endsWith(".jar")) {

            println "Downloading release: $parsedJson.tag_name"
            downloadFile(data.browser_download_url, path + File.separator + assetName)

            return assetName
        }
    }

    return null
}

static void downloadFile(String fileURL, String saveDir) throws IOException {
    FileOutputStream outputStream = new FileOutputStream(saveDir);
    downloadTo(fileURL, outputStream);
}

static String downloadToString(String fileURL) throws IOException {
    ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
    downloadTo(fileURL, outputStream);
    return outputStream.toString();
}

static void downloadTo(String urlPath, OutputStream outputStream) throws IOException {

    def url = new URL(urlPath);
    def connection = (HttpURLConnection) url.openConnection();
    connection.setInstanceFollowRedirects(true);

    // always check HTTP response code first
    def responseCode = connection.getResponseCode();

    if (responseCode != HttpURLConnection.HTTP_OK) {
        println("No file to download. Server replied HTTP code: " + responseCode);
        return;
    }

    // opens input stream from the HTTP connection
    InputStream inputStream = connection.getInputStream();

    // opens an output stream to save into file
    def currentBytes = 0;
    def bytesRead;
    def buffer = new byte[4096];

    while ((bytesRead = inputStream.read(buffer)) != -1) {
        currentBytes += bytesRead;
        outputStream.write(buffer, 0, bytesRead);
    }

    outputStream.close();
    inputStream.close();
    connection.disconnect();
}